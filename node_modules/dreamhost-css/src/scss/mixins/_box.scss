	// Box

	// This mixin can be used in your scss to add a padded style to your content.

	// Include it as a mixin on your meaningful classes so you can also apply
	// specific, unrelated styles. To save time you can also use the class .box
	// directly in your HTML.

	// Usage [HTML]
	// 	<section class="thing thing--background">
	// 		<h2>Heading</h2>
	// 		<p>Content</p>
	// 		<a href="#" class="btn">CTA</a>
	// 	</section>

	// Usage [CSS]
	// 	.thing {
	// 		@include box;
	// 	}


@mixin box($color: #fff){
	padding: convertScaleToRem(4);
	background: $color;

	// TODO: Make this less confusing.
	// Maybe we have a rule saying that stock components shouldn't have top or bottom margin by default. They're "self contained".
	// We only add margin through utility classes in specific contexts.
	// That way if a box has inconsistent padding, it's from an improper use of a margin class.
	> *:last-child {
		// To keep the padding consistent in the box on all sides.
		// We don't need to remove the margin-top because nothing
		// should be applying a top margin.

		&:not(input) {
			&:not(textarea) {
			// Inputs are usually inside of <fieldset>.
			// If you add a box to a form the inputs would be smushed.
			// Could also be mitigated by altering the :last-child
			// on the inputs and adding the margin-bottom on the
			// fieldsets themselves but then we'd be forcing usage
			// of fieldsets and sometimes you don't want that like
			// on single line inputs.
			margin-bottom: 0;
			}
		}
	}
}

.box {
	@include box;
}
